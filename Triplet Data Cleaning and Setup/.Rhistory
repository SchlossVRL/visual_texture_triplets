setwd("~/Dropbox/TextureSemantics/VisualTextureTriplets/Triplet Code/Triplet Experiment/Triplet Data Cleaning and Setup")
# Load necessary libraries
library(readxl)
library(dplyr)
library(openxlsx)
# Read the Excel file
validation_set <- read_excel("validation_comparisons.xlsx", sheet = "Sample Set", col_names = TRUE)
# Ensure the column name is correct
validation_set <- validation_set$img
# Function to create unique combinations
create_combinations <- function(validation_set) {
combinations <- combn(validation_set, 3, simplify = FALSE)
combinations <- lapply(combinations, function(x) {
setNames(x, c("head", "choice_1", "choice_2"))
})
return(combinations)
}
# Shuffle and create combinations
set.seed(123) # For reproducibility
validation_combinations <- sample(validation_set)
combinations <- create_combinations(validation_combinations)
View(combinations)
# Convert to a data frame
combinations_df <- do.call(rbind, lapply(combinations, as.data.frame))
View(combinations_df)
# Read the Excel file
validation_set <- read_excel("validation_comparisons.xlsx", sheet = "Sample Set", col_names = TRUE)
# Ensure the column name is correct
validation_set <- validation_set$img
# Function to create unique combinations
create_combinations <- function(validation_set) {
sets <- list()
for( i in seq_along(validation_set)) {
remaining_imgs <- validations_set[-i]
shuffled_imgs <- sample(remaining_imgs)
sets <- c(validation_set[i], shuffled_imgs[1:2])
sets[[i]] <- setNames(set, c("head", "choice_1", "choice_2"))
}
return(sets)
}
# Shuffle and create combinations
set.seed(123) # For reproducibility
validation_combinations <- sample(validation_set)
combinations <- create_combinations(validation_combinations)
# Shuffle and create combinations
set.seed(123) # For reproducibility
#validation_combinations <- sample(validation_set)
#combinations <- create_combinations(validation_combinations)
combinations <- create_combinations(validation_combinations)
# Function to create unique combinations
create_combinations <- function(validation_set) {
sets <- list()
for( i in seq_along(validation_set)) {
remaining_imgs <- validation_set[-i]
shuffled_imgs <- sample(remaining_imgs)
sets <- c(validation_set[i], shuffled_imgs[1:2])
sets[[i]] <- setNames(set, c("head", "choice_1", "choice_2"))
}
return(sets)
}
# Shuffle and create combinations
set.seed(123) # For reproducibility
#validation_combinations <- sample(validation_set)
#combinations <- create_combinations(validation_combinations)
combinations <- create_combinations(validation_combinations)
# Function to create unique combinations
create_combinations <- function(validation_set) {
sets <- list()
for( i in seq_along(validation_set)) {
remaining_imgs <- validation_set[-i]
shuffled_imgs <- sample(remaining_imgs)
sets <- c(validation_set[i], shuffled_imgs[1:2])
sets[[i]] <- setNames(sets, c("head", "choice_1", "choice_2"))
}
return(sets)
}
# Shuffle and create combinations
set.seed(123) # For reproducibility
#validation_combinations <- sample(validation_set)
#combinations <- create_combinations(validation_combinations)
combinations <- create_combinations(validation_combinations)
# Function to create unique combinations
create_combinations <- function(validation_set) {
sets <- list()
for( i in seq_along(validation_set)) {
remaining_imgs <- validation_set[-i]
shuffled_imgs <- sample(remaining_imgs)
set <- c(validation_set[i], shuffled_imgs[1:2])
sets[[i]] <- setNames(set, c("head", "choice_1", "choice_2"))
}
return(sets)
}
# Shuffle and create combinations
set.seed(123) # For reproducibility
#validation_combinations <- sample(validation_set)
#combinations <- create_combinations(validation_combinations)
combinations <- create_combinations(validation_combinations)
# Convert to a data frame
combinations_df <- do.call(rbind, lapply(combinations, as.data.frame))
View(combinations)
View(combinations_df)
print(combinations_df)
# Ensure the column name is correct
validation_set <- validation_set$img
# Clear environment ----------
rm(list=ls())
# Load necessary libraries
library(readxl)
library(dplyr)
library(openxlsx)
# Read the Excel file
validation_set <- read_excel("validation_comparisons.xlsx", sheet = "Sample Set", col_names = TRUE)
# Read the Excel file
validation_set <- read_excel("validation_comparisons.xlsx", sheet = "Sample Set", col_names = TRUE)
# Ensure the column name is correct
validation_set <- validation_set$img
# Function to create unique combinations
create_combinations <- function(validation_set) {
sets <- list()
for( i in seq_along(validation_set)) {
remaining_imgs <- validation_set[-i]
shuffled_imgs <- sample(remaining_imgs)
set <- c(validation_set[i], shuffled_imgs[1:2])
#create data frame
sets[[i]] <- as.data.frame(t(set), stringAsFactors = FALSE)
names(sets[[i]]) <- c("head", "choice_1", "choice_2")
#setNames(set, c("head", "choice_1", "choice_2"))
}
return(sets)
}
# Shuffle and create combinations
combinations <- create_combinations(validation_combinations)
# Convert to a data frame
combinations_df <- do.call(rbind, lapply(combinations, as.data.frame))
# Ensure the column name is correct
validation_set <- validation_set$img
# Function to create unique combinations
create_combinations <- function(validation_set) {
sets <- list()
for( i in seq_along(validation_set)) {
remaining_imgs <- validation_set[-i]
shuffled_imgs <- sample(remaining_imgs)
set <- c(validation_set[i], shuffled_imgs[1:2])
#create data frame
sets[[i]] <- as.data.frame(t(set), stringAsFactors = FALSE)
names(sets[[i]]) <- c("head", "choice_1", "choice_2")
#setNames(set, c("head", "choice_1", "choice_2"))
}
return(sets)
}
# Shuffle and create combinations
combinations <- create_combinations(validation_set)
# Convert to a data frame
combinations_df <- do.call(rbind, lapply(combinations, as.data.frame))
View(combinations_df)
# Clear environment ----------
rm(list=ls())
# Load necessary libraries
library(readxl)
library(dplyr)
library(openxlsx)
# Read the Excel file
validation_set <- read_excel("validation_comparisons.xlsx", sheet = "Sample Set", col_names = TRUE)
# Ensure the column name is correct
validation_set <- validation_set$img
# Function to create unique combinations
create_combinations <- function(validation_set) {
sets <- list()
for( i in seq_along(validation_set)) {
remaining_imgs <- validation_set[-i]
shuffled_imgs <- sample(remaining_imgs)
set <- c(validation_set[i], shuffled_imgs[1:2])
#create data frame
sets[[i]] <- as.data.frame(t(set), stringAsFactors = FALSE)
names(sets[[i]]) <- c("head", "choice_1", "choice_2")
#setNames(set, c("head", "choice_1", "choice_2"))
}
return(sets)
}
# Shuffle and create combinations
combinations <- create_combinations(validation_set)
View(combinations)
print(combinations)
# Convert to a data frame
combinations_df <- do.call(rbind, lapply(combinations, as.data.frame))
View(combinations_df)
# Load the existing Excel file
wb <- loadWorkbook("validation_comparisons.xlsx")
# Add a new sheet with the combinations
addWorksheet(wb, "Randomized Sets")
# Add a new sheet with the combinations
addWorksheet(wb, "Randomized Sets")
# Load the existing Excel file
wb <- loadWorkbook("validation_comparisons.xlsx")
# Add a new sheet with the combinations
addWorksheet(wb, "Randomized Sets")
writeData(wb, sheet = "Randomized Sets", combinations_df)
# Save the workbook
saveWorkbook(wb, "validation_comparisons.xlsx", overwrite = TRUE)
install.packages("magick")
# Load the necessary package
library(magick)
# Clear environment ----------
rm(list=ls())
# Load necessary libraries
library(readxl)
library(dplyr)
library(openxlsx)
# Read the Excel file
validation_set <- read_excel("validation_comparisons.xlsx", sheet = "Sample Set", col_names = TRUE)
# Ensure the column name is correct
validation_set <- validation_set$img
# Function to create unique combinations
create_combinations <- function(validation_set) {
sets <- list()
for( i in seq_along(validation_set)) {
remaining_imgs <- validation_set[-i]
shuffled_imgs <- sample(remaining_imgs)
set <- c(validation_set[i], shuffled_imgs[1:2])
#create data frame
sets[[i]] <- as.data.frame(t(set), stringAsFactors = FALSE)
names(sets[[i]]) <- c("head", "choice_1", "choice_2")
#setNames(set, c("head", "choice_1", "choice_2"))
}
return(sets)
}
# Shuffle and create combinations
combinations <- create_combinations(validation_set)
# Convert to a data frame
combinations_df <- do.call(rbind, lapply(combinations, as.data.frame))
# Load the existing Excel file
wb <- loadWorkbook("validation_comparisons.xlsx")
# Add a new sheet with the combinations
addWorksheet(wb, "Randomized Sets")
writeData(wb, sheet = "Randomized Sets", combinations_df)
# Save the workbook
saveWorkbook(wb, "validation_comparisons.xlsx", overwrite = TRUE)
View(combinations)
View(combinations_df)
